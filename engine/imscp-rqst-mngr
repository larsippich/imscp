#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2014 by i-MSCP | http://i-mscp.net
# @author      Daniel Andreca <sci2tech@gmail.com>
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin", "$FindBin::Bin/PerlLib", "$FindBin::Bin/PerlVendor";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::HooksManager;
use iMSCP::Execute;
use MIME::Base64;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

# Mode in which the request dispatcher is triggered
# For now, this variable is only used by i-MSCP installer/setup scripts
$main::execmode = shift || '';

umask(027);

newDebug('imscp-rqst-mngr.log');

silent(1);

iMSCP::Bootstrapper->getInstance()->boot({ 'norequirements' => 'yes' });

sub run
{
	my $rs = 0;

	# Process plugins
	# Should always be processed first to allow plugins to register their listeners on the hooks manager
	$rs = _process(
		'Plugin',
		"
			SELECT
				plugin_id AS id, plugin_name AS name, plugin_status AS status
			FROM
				plugin
			WHERE
				plugin_status IN ('enabled', 'toinstall', 'toenable', 'toupdate', 'tochange', 'todisable', 'touninstall')
			AND
				plugin_error IS NULL
			AND
				plugin_backend = 'yes'
		"
	);

	$rs ||= iMSCP::HooksManager->getInstance()->trigger('beforeDispatchRequest');

	# Process toadd|tochange SSL certificates tasks
	$rs ||= _process(
		'Certificates',
		"
			SELECT
				cert_id AS id, type AS name, status AS status
			FROM
				ssl_certs
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process toadd|tochange users tasks
	$rs ||= _process(
		'User',
		"
			SELECT
				admin_id AS id, admin_name AS name, admin_status AS status
			FROM
				admin
			WHERE
				admin_type = 'user'
			AND
				admin_status IN ('toadd', 'tochange')
		"
	);

	my $ipsMod = 0;

	# Process toadd|tochange|torestore|toenable|todisable domain tasks
	$rs ||= _process(
		'Domain',
		"
			SELECT
				domain_id AS id, domain_name AS name, domain_status AS status
			FROM
				domain
			WHERE
				domain_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable', 'disabled')
		",
		\$ipsMod
	);

	# Process toadd|tochange|torestore|toenable|todisable subdomains tasks
	$rs ||= _process(
		'Subdomain',
		"
			SELECT
				subdomain_id AS id, subdomain_name AS name, subdomain_status AS status
			FROM
				subdomain
			WHERE
				subdomain_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable', 'disabled')
		",
		\$ipsMod
	);

	# Process toadd|tochange|torestore|toenable|todisable domain aliases tasks
	$rs ||= _process(
		'Alias',
		 "
			SELECT
				alias_id AS id, alias_name AS name, alias_status AS status
			FROM
				domain_aliasses
			WHERE
				alias_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable', 'disabled')
		 ",
		 \$ipsMod
	);

	# Process toadd|tochange|torestore|toenable|todisable subdomains of domain aliases tasks
	$rs ||= _process(
		'SubAlias',
		"
			SELECT
				subdomain_alias_id AS id, subdomain_alias_name AS name, subdomain_alias_status AS status
			FROM
				subdomain_alias
			WHERE
				subdomain_alias_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable', 'disabled')
		",
		\$ipsMod
	);

	# Process toadd|tochange|toenable|todisable|todelete mail tasks
	$rs ||= _process(
		'Mail',
		"
			SELECT
				mail_id AS id, mail_addr AS name, status AS status
			FROM
				mail_users
			WHERE
				status IN ('toadd', 'tochange', 'toenable', 'todelete', 'todisable')
		"
	);

	# Process toadd|tochange|todelete Htusers tasks
	$rs ||= _process(
		'Htusers',
		"
			SELECT
				id, uname AS name, status
			FROM
				htaccess_users
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process toadd|tochange|todelete Htgroups tasks
	$rs ||= _process(
		'Htgroup',
		"
			SELECT
				id AS id, CONCAT(ugroup, ':', id) AS name, status
			FROM
				htaccess_groups
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process toadd|tochange|todelete Htaccess tasks
	$rs ||= _process(
		'Htaccess',
		"
			SELECT
				id, auth_name AS name, status
			FROM
				htaccess
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process todelete subdomain aliases tasks
	$rs ||= _process(
		'SubAlias',
		"
			SELECT
				subdomain_alias_id AS id, subdomain_alias_name AS name, subdomain_alias_status AS status
			FROM
				subdomain_alias
			WHERE
				subdomain_alias_status = 'todelete'
		",
		\$ipsMod
	);

	# Process todelete subdomains tasks
	$rs ||= _process(
		'Subdomain',
		"
			SELECT
				subdomain_id AS id, subdomain_name AS name, subdomain_status AS status
			FROM
				subdomain
			WHERE
				subdomain_status = 'todelete'
		",
		\$ipsMod
	);

	# Process todelete domain aliases tasks
	$rs ||= _process(
		'Alias',
		"
			SELECT
				alias_id AS id, alias_name AS name, alias_status AS status
			FROM
				domain_aliasses
			WHERE
				alias_status = 'todelete'
		",
		\$ipsMod
	);

	# Process todelete domains tasks
	$rs ||= _process(
		'Domain',
		"
			SELECT
				domain_id AS id, domain_name AS name, domain_status AS status
			FROM
				domain
			WHERE
				domain_status = 'todelete'
		",
		\$ipsMod
	);

	# Process todelete users tasks
	$rs ||= _process(
		'User',
		"
			SELECT
				admin_id AS id, admin_name AS name, admin_status AS status
			FROM
				admin
			WHERE
				admin_type = 'user'
			AND
				admin_status = 'todelete'
		"
	);

	# Process network cards tasks
	$rs ||= _process(
		'NetCard',
		"
			SELECT
				ip_id AS id, ip_status AS name, ip_status AS status
			FROM
				server_ips
			WHERE
				ip_status <> 'ok'
		"
	);

	# Process IP addresses tasks
	# This module should always me processed to handle case were only one domain is registered and disabled)
	if(! $rs && $ipsMod != 0) {
		newDebug("Ips_mngr.log");

		require Modules::Ips;
		$rs = Modules::Ips->new()->process();

		endDebug();
	}

	# software installation BEGIN

	unless($rs) {
		my $db = iMSCP::Database->factory();

		my $rdata = $db->doQuery(
			'software_id',
			"
				SELECT
					domain_id, alias_id, subdomain_id, subdomain_alias_id, software_id, path, software_prefix,
					db, database_user, database_tmp_pwd, install_username, install_password, install_email,
					software_status, software_depot, software_master_id
				FROM
					web_software_inst
				WHERE
					software_status IN ('toadd', 'todelete')
				ORDER BY
					domain_id
			"
		);
		unless(ref $rdata eq 'HASH'){
			error($rdata);
			$rs = 1;
		} else {
			my $count = scalar keys %{$rdata};

			newDebug('imscp_sw_mngr_engine') if $count;

			for (keys %$rdata) {
				my (
					$sw_domain_id, $sw_aliasdomain_id, $sw_subdomain_id, $sw_aliassubdomain_id, $sw_software_id,
					$sw_path, $sw_software_prefix, $sw_database, $sw_database_user, $sw_database_tmp_pwd,
					$sw_install_username, $sw_install_password, $sw_install_email, $sw_software_status,
					$sw_software_depot, $sw_software_master_id
				) = (
					$rdata->{$_}->{'domain_id'}, $rdata->{$_}->{'alias_id'}, $rdata->{$_}->{'subdomain_id'},
					$rdata->{$_}->{'subdomain_alias_id'}, $rdata->{$_}->{'software_id'}, $rdata->{$_}->{'path'},
					$rdata->{$_}->{'software_prefix'}, $rdata->{$_}->{'db'}, $rdata->{$_}->{'database_user'},
					$rdata->{$_}->{'database_tmp_pwd'}, $rdata->{$_}->{'install_username'},
					$rdata->{$_}->{'install_password'}, $rdata->{$_}->{'install_email'},
					$rdata->{$_}->{'software_status'}, $rdata->{$_}->{'software_depot'},
					$rdata->{$_}->{'software_master_id'}
				);

				# Encoding data to push to another script
				my $imscp_sw_mngr_pushstring = encode_base64(
					"$sw_domain_id,$sw_software_id,$sw_path,$sw_software_prefix,$sw_database,$sw_database_user," .
					"$sw_database_tmp_pwd,$sw_install_username,$sw_install_password,$sw_install_email," .
					"$sw_software_status,$sw_software_depot,$sw_software_master_id,$sw_aliasdomain_id," .
					"$sw_subdomain_id,$sw_aliassubdomain_id"
				);

				debug("Processing encoded pushtring: $imscp_sw_mngr_pushstring.");

				my ($stdout, $stderr);
				$rs = execute(
					"$main::imscpConfig{'CMD_PERL'} $main::imscpConfig{'ENGINE_ROOT_DIR'}/imscp-sw-mngr " .
						"\"$imscp_sw_mngr_pushstring\"",
					\$stdout,
					\$stderr
				);
				debug($stdout) if $stdout;
				error($stderr) if $stderr && $rs;
				last if $rs;

				$rs = execute(
					"$main::imscpConfig{'CMD_RM'} -fR /tmp/sw-$sw_domain_id-$sw_software_id", \$stdout, \$stderr
				);
				debug($stdout) if $stdout;
				error($stderr) if $stderr && $rs;
				last if $rs;
			}

			endDebug() if $count;

			unless($rs) {
				$rdata = $db->doQuery(
					'software_id',
					"
						SELECT
							software_id, reseller_id, software_archive, software_status, software_depot
						FROM
							web_software
						WHERE
							software_status = 'toadd'
						ORDER BY
							reseller_id
					"
				);
				unless(ref $rdata eq 'HASH'){
					error($rdata);
					$rs = 1;
				} else {
					$count = scalar keys %$rdata;

					newDebug('imscp_pkt_mngr_engine.log') if $count;

					for (keys %$rdata) {
						my (
							$sw_software_id, $sw_reseller_id, $sw_software_archive, $sw_software_status,
							$sw_software_depot
						) = (
							$rdata->{$_}->{'software_id'}, $rdata->{$_}->{'reseller_id'},
							$rdata->{$_}->{'software_archive'}, $rdata->{$_}->{'software_status'},
							$rdata->{$_}->{'software_depot'}
						);

						# Encoding data to push to another script
						my $pushstring = encode_base64(
							"$sw_software_id,$sw_reseller_id,$sw_software_archive,$sw_software_status,$sw_software_depot"
						);

						my ($stdout, $stderr);
						$rs = execute(
							"$main::imscpConfig{'CMD_PERL'} $main::imscpConfig{'ENGINE_ROOT_DIR'}/imscp-pkt-mngr " .
								"\"$pushstring\"",
							\$stdout,
							\$stderr
						);
						debug($stdout) if $stdout;
						error($stderr) if $stderr && $rs;
						last if $rs;

						$rs = execute(
							"$main::imscpConfig{'CMD_RM'} -fR /tmp/sw-$sw_software_archive-$sw_software_id",
							\$stdout,
							\$stderr
						);
						debug($stdout) if $stdout;
						error($stderr) if $stderr && $rs;
						last if $rs;
					}
				}
			}

			endDebug() if $count;
		}
	}

	iMSCP::HooksManager->getInstance()->trigger('afterDispatchRequest', $rs);
}

sub _process
{
	my ($type, $sql, $ipMods) = @_;
	my $rs = 0;

	debug("Processing type $type");

	if ($main::execmode ne 'setup') {
		print("=======================\n");
		print("Processing type $type.\n");
	}

	my $rdata = iMSCP::Database->factory()->doQuery('id', $sql);
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	my $i = 1;
	my $total = scalar keys %$rdata;
	$$ipMods += $total if ref $ipMods;

	if(%{$rdata}) {
		for (keys %{$rdata}) {
			my $id = $rdata->{$_}->{'id'};
			my $name = $rdata->{$_}->{'name'};
			my $status = $rdata->{$_}->{'status'};

			# Needed to run ips module in case all registered domain are disabled
			next if $rdata->{$_}->{'status'} eq 'disabled';

			debug("Processing $id, $name, $status.");

			if($main::execmode ne 'setup') {
				print("Processing $id, $name, $status. ($i of $total: remaining " . ($total - $i) . ")\n");
			} else {
				print STDOUT ("$type\t$status\t$name\t$id\t$total\t$i\n");
			}

			$i++;

			newDebug("${type}_mngr_$name.log");

			my $file = "Modules/${type}.pm";
			my $class = "Modules::$type";

			require $file;
			$rs = $class->new()->process($id);

			endDebug();

			if($rs) {
				error("Error while processing $id, $name, $status.");
				my $logDir = defined $main::imscpConfig{'LOG_DIR'} ? $main::imscpConfig{'LOG_DIR'} : '';
				error("See $logDir/${type}_mngr_$name.log for details.");
			}

			return $rs if $rs;
		}
	} else {
		debug("No $type to process.");
	}

	0;
}

exit run();
